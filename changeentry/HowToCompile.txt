Author:Li Xiaofeng
Date:2020.7.25
Environment:msys64

1.使用main做为入口。
gcc twoentry.c
编译后生成a.exe，执行后出现以下显示：
Function is main,default entry.

2。使用myentry做为入口函数。
gcc -c twotry.c
执行此命令后，生成twotry.o文件。
然后将此文件中的入口函数用myentry更改。
objcopy --redefine-sym myentry=lxf twotry.o
objcopy --redefine-sym main=myentry twotry.o
objcopy --redefine-sym lxf=main twotry.o
然后对twotry.o生成exe文件：
 gcc -o ok.exe twotry.o
执行ok.exe,显示：
Function is secentry,specific entry.

在objcopy过程中，可以使用：
	nm twotry.o
查看符号表的变化。

*****************************************************
* 刚开始准备用ld 的-e来指定入口函数，但是就才方法
* 尝试了很多参数，无法成功，后使用objcopy
* 调试过程中如下
*
*****************************************************
，具体设计的过程如下：
@@@尝试1：
gcc -c twotry.c
gcc -o b.exe -nostartfiles -emyentry twotry.c -lc

@@@尝试2：
gcc -o b.exe -nostartfiles -Wl,-emyentry twotry.c -lc

注意：如果你是32位系统，参数是-e_myentry，到底是那个符号，可以用nm看以下twotry.o

========================================================
nm命令是linux下自带的特定文件分析工具，一般用来检查分析二进制文件、库文件、可执行文件中的符号表，返回二进制文件中各段的信息。
用法：nm [选项]  [文件名称] ，若未输入文件名，则默认作用于当前路径的a.out文件。     
选项：
        -a    只显示调试信息 
		-A    在每行符号信息前，打印查询的文件名
        -C    将低级别的符号名称转换为用户级别的名称，意思是转换为用户较容易理解的形式，如：class::memberfunction形式的信息
        -D    显示动态符号信息
        -g    只显示外部符号；封装成动态库时，需要被外部调用的函数必须是外部符号，否则无法使用
        -n    将符号按地址排序
        -r    反向排序
        -u    仅显示未定义符号，实测列出了GLIBC中的memset、memcpy等，不清楚具体作用
        -V    输出程序版本
